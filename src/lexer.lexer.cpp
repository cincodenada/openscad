
#line 3 "lex.lexer.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer lexer_create_buffer
#define yy_delete_buffer lexer_delete_buffer
#define yy_flex_debug lexer_flex_debug
#define yy_init_buffer lexer_init_buffer
#define yy_flush_buffer lexer_flush_buffer
#define yy_load_buffer_state lexer_load_buffer_state
#define yy_switch_to_buffer lexer_switch_to_buffer
#define yyin lexerin
#define yyleng lexerleng
#define yylex lexerlex
#define yylineno lexerlineno
#define yyout lexerout
#define yyrestart lexerrestart
#define yytext lexertext
#define yywrap lexerwrap
#define yyalloc lexeralloc
#define yyrealloc lexerrealloc
#define yyfree lexerfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE lexerrestart(lexerin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int lexerleng;

extern FILE *lexerin, *lexerout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE lexerlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-lexerlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < lexerleng; ++yyl )\
                    if ( lexertext[yyl] == '\n' )\
                        --lexerlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up lexertext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up lexertext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via lexerrestart()), so that the user can continue scanning by
	 * just pointing lexerin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when lexertext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int lexerleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow lexerwrap()'s to do buffer switches
 * instead of setting up a fresh lexerin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void lexerrestart (FILE *input_file  );
void lexer_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE lexer_create_buffer (FILE *file,int size  );
void lexer_delete_buffer (YY_BUFFER_STATE b  );
void lexer_flush_buffer (YY_BUFFER_STATE b  );
void lexerpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void lexerpop_buffer_state (void );

static void lexerensure_buffer_stack (void );
static void lexer_load_buffer_state (void );
static void lexer_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER lexer_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE lexer_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE lexer_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE lexer_scan_bytes (yyconst char *bytes,int len  );

void *lexeralloc (yy_size_t  );
void *lexerrealloc (void *,yy_size_t  );
void lexerfree (void *  );

#define yy_new_buffer lexer_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        lexerensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            lexer_create_buffer(lexerin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        lexerensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            lexer_create_buffer(lexerin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define lexerwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *lexerin = (FILE *) 0, *lexerout = (FILE *) 0;

typedef int yy_state_type;

extern int lexerlineno;

int lexerlineno = 1;

extern char *lexertext;
#define yytext_ptr lexertext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up lexertext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	lexerleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 52
#define YY_END_OF_BUFFER 53
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[182] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   53,   51,   35,   50,   51,   24,   51,   51,
       51,   51,   20,   51,   51,   51,   23,   23,   23,   23,
       23,   23,   23,   23,   51,   18,   18,   51,   51,   51,
       43,   43,   43,   43,   43,   39,   37,   39,   39,   39,
       33,   52,   34,   52,   33,   33,   33,    3,    2,    4,
        6,    7,   47,   23,   48,   21,   40,   36,   22,   20,
       23,   44,   46,   45,   23,   23,   23,   23,   23,   10,
       23,   23,   23,   23,   23,   23,   49,   18,   19,   18,
        0,    0,   41,   42,    0,    0,   38,    0,    0,   29,

        0,   28,   25,   27,   26,    0,    0,   30,    0,    0,
        3,    2,    0,    6,    0,   21,    0,    0,   20,   23,
       23,   23,   13,   23,   23,   12,   23,   23,   23,   23,
        0,    0,    0,   18,    0,    0,    0,    0,    0,    0,
        0,    0,   21,    0,    0,   22,   20,   14,   11,   23,
       23,   23,   23,   15,   23,    0,    5,    0,    0,   31,
        0,   21,   16,   23,   23,   23,   17,    0,    0,   23,
       23,    8,    0,   32,   23,   23,    0,    9,    0,    1,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    1,    8,    1,    1,
        1,    9,   10,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   14,   14,    1,    1,   15,
       16,   17,    1,    1,   18,   18,   18,   18,   19,   18,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   21,   20,   20,   20,   20,   20,
        1,   22,    1,    1,   20,    1,   23,   18,   24,   25,

       26,   27,   20,   28,   29,   20,   20,   30,   31,   32,
       33,   20,   20,   34,   35,   36,   37,   20,   20,   38,
       20,   20,    1,   39,    1,    1,    1,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   41,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,    1,    1,   42,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   45,
       45,   45,   45,   45,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[46] =
    {   0,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    1,    1,    2,    3,    3,    4,
        4,    1,    3,    3,    3,    3,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[201] =
    {   0,
        0,    0,   37,   41,   45,   49,   92,  135,   51,   53,
       55,   57,  342,  343,  343,  343,  325,  343,    0,  332,
       48,   55,   86,  323,  322,  321,    0,   43,   73,   44,
      310,  302,  300,   43,  294,   60,   67,   63,   75,   77,
      343,  320,   79,   81,   83,  343,  343,   85,   87,   89,
      343,  343,  343,  175,   91,   99,  102,  319,  318,  343,
        0,  343,  343,    0,  343,  132,  343,  343,  134,    0,
      142,  343,  343,  343,  305,  293,  297,  292,  293,    0,
      300,  287,  297,  284,  295,  293,  343,  108,  119,  124,
      130,  132,  343,  343,  134,  142,  343,  144,  146,  343,

        0,  343,  343,  343,  343,    0,  305,  343,  148,  150,
      305,  304,  303,    0,  185,  189,  191,  179,  203,  284,
      282,  269,    0,  255,  246,    0,  237,  247,  246,  216,
      181,  183,  185,  187,  194,  196,  198,    0,    0,    0,
      200,  229,  231,  236,  234,  238,  240,    0,    0,  245,
      233,  195,  200,    0,  187,  253,  343,    0,    0,  343,
      245,  247,    0,  181,  181,  174,    0,    0,    0,  161,
      150,    0,    0,  343,  127,  260,    0,    0,  263,  343,
      343,  280,  284,  288,  292,  296,  298,  302,  306,  310,
      151,  141,  130,  110,  108,   74,   66,   48,   46,   44

    } ;

static yyconst flex_int16_t yy_def[201] =
    {   0,
      181,    1,  182,  182,  183,  183,  184,  184,  185,  185,
      186,  186,  181,  181,  181,  181,  181,  181,  187,  181,
      181,  181,  187,  181,  181,  181,  187,  187,  187,  187,
      187,  187,  187,  187,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  188,  189,  181,
      190,  181,  181,  187,  181,  181,  181,  181,  181,   23,
      187,  181,  181,  181,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,

      191,  181,  181,  181,  181,  192,  181,  181,  181,  181,
      188,  189,  189,  190,  181,  181,  181,  181,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      181,  181,  181,  181,  181,  181,  181,  193,  194,  195,
      181,  181,  181,  181,  181,  181,  181,  187,  187,  187,
      187,  187,  187,  187,  187,  181,  181,  196,  197,  181,
      181,  181,  187,  187,  187,  187,  187,  198,  199,  187,
      187,  187,  200,  181,  187,  187,  199,  187,  181,  181,
        0,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181

    } ;

static yyconst flex_int16_t yy_nxt[389] =
    {   0,
       14,   15,   16,   15,   17,   18,   19,   20,   14,   14,
       21,   22,   23,   23,   24,   25,   26,   27,   27,   27,
       27,   14,   27,   27,   27,   28,   29,   27,   30,   31,
       32,   27,   27,   27,   27,   33,   34,   27,   35,   14,
       36,   37,   38,   39,   40,   42,  177,   47,  174,   42,
      173,   47,   52,   52,   52,   52,   52,   52,   52,   52,
       66,   66,   59,   67,   59,   75,   68,   60,  169,   60,
       80,   62,   76,   62,   85,   81,  168,   86,   43,   43,
       44,   45,   43,   43,   44,   45,   48,   48,   49,   50,
       48,   48,   49,   50,   52,   77,   69,   53,   70,   70,

       88,   88,   89,   89,   71,   78,   89,   90,   88,   79,
      160,   71,  159,   54,   91,   91,   92,   92,   94,   94,
       95,   95,   96,   96,   97,   97,   98,   98,   99,   99,
      108,  108,  158,   55,   55,   56,   57,   52,  109,  109,
       53,  110,  110,  139,   66,   66,  116,  116,   88,   88,
      115,  118,  117,  138,  119,  119,   54,  115,  178,  117,
      131,  131,  132,  133,   88,  134,  131,  132,  133,   89,
       89,  135,  135,   94,   94,  176,   55,   55,   56,   57,
      100,  136,  136,   97,   97,  137,  137,  108,  108,  141,
      141,  147,  147,  175,  142,  101,  102,  143,  143,  172,

      145,  116,  116,  146,  146,  171,  103,  144,  104,  170,
      105,  106,  107,  167,  144,  119,  119,  156,  156,  156,
       89,   89,   91,   91,   92,   92,   89,   90,   88,  166,
      157,  165,  156,   89,   89,   94,   94,   97,   97,  108,
      108,  143,  143,  143,  143,  161,  146,  146,  162,  162,
      146,  146,  147,  147,  156,  156,  156,  162,  162,  162,
      162,  179,  179,  179,  179,  179,  179,  157,  164,  156,
      163,  155,  154,  153,  180,  152,  179,  180,  151,  179,
       41,   41,   41,   41,   46,   46,   46,   46,   51,   51,
       51,   51,   58,   58,   58,   58,   61,   61,   61,   61,

       64,   64,  111,  150,  111,  111,  113,  149,  113,  113,
      114,  148,  114,  114,  112,  112,  112,  140,  130,  129,
      128,  127,  126,  125,  124,  123,  122,  121,  120,  112,
      112,   93,   87,   84,   83,   82,   74,   73,   72,   65,
       63,  181,   13,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181
    } ;

static yyconst flex_int16_t yy_chk[389] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,  200,    5,  199,    4,
      198,    6,    9,    9,   10,   10,   11,   11,   12,   12,
       21,   21,    9,   22,   10,   28,   22,    9,  197,   10,
       30,   11,   28,   12,   34,   30,  196,   34,    3,    3,
        3,    3,    4,    4,    4,    4,    5,    5,    5,    5,
        6,    6,    6,    6,    7,   29,   23,    7,   23,   23,

       36,   36,   38,   38,   23,   29,   37,   37,   37,   29,
      195,   23,  194,    7,   39,   39,   40,   40,   43,   43,
       44,   44,   45,   45,   48,   48,   49,   49,   50,   50,
       55,   55,  193,    7,    7,    7,    7,    8,   56,   56,
        8,   57,   57,  192,   66,   66,   69,   69,   88,   88,
       66,   71,   69,  191,   71,   71,    8,   66,  175,   69,
       89,   89,   89,   89,   90,   90,   90,   90,   90,   91,
       91,   92,   92,   95,   95,  171,    8,    8,    8,    8,
       54,   96,   96,   98,   98,   99,   99,  109,  109,  110,
      110,  118,  118,  170,  115,   54,   54,  115,  115,  166,

      117,  116,  116,  117,  117,  165,   54,  116,   54,  164,
       54,   54,   54,  155,  116,  119,  119,  130,  130,  130,
      131,  131,  132,  132,  133,  133,  134,  134,  134,  153,
      130,  152,  130,  135,  135,  136,  136,  137,  137,  141,
      141,  142,  142,  143,  143,  144,  145,  145,  144,  144,
      146,  146,  147,  147,  156,  156,  156,  161,  161,  162,
      162,  176,  176,  176,  179,  179,  179,  156,  151,  156,
      150,  129,  128,  127,  176,  125,  176,  179,  124,  179,
      182,  182,  182,  182,  183,  183,  183,  183,  184,  184,
      184,  184,  185,  185,  185,  185,  186,  186,  186,  186,

      187,  187,  188,  122,  188,  188,  189,  121,  189,  189,
      190,  120,  190,  190,  113,  112,  111,  107,   86,   85,
       84,   83,   82,   81,   79,   78,   77,   76,   75,   59,
       58,   42,   35,   33,   32,   31,   26,   25,   24,   20,
       17,   13,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[53] =
    {   0,
1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int lexer_flex_debug;
int lexer_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *lexertext;
#line 1 "src/lexer.l"
/*
 *  OpenSCAD (www.openscad.org)
 *  Copyright (C) 2009-2011 Clifford Wolf <clifford@clifford.at> and
 *                          Marius Kintel <marius@kintel.net>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  As a special exception, you have permission to link this program
 *  with the CGAL library and distribute executables, as long as you
 *  follow the requirements of the GNU GPL in regard to all of the
 *  software in the executable aside from CGAL.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
#line 28 "src/lexer.l"

#include <glib.h>
#include "typedefs.h"
#include "handle_dep.h"
#include "printutils.h"
#include "parsersettings.h"
#include "parser_yacc.h"
#include "module.h"
#include <assert.h>
#include <boost/lexical_cast.hpp>
#include <boost/filesystem.hpp>
namespace fs = boost::filesystem;
#include "boosty.h"

//isatty for visual c++ and mingw-cross-env
#if defined __WIN32__ && ! defined _MSC_VER
#include "unistd.h"
#endif
#if defined __WIN32__ || defined _MSC_VER
extern "C" int __cdecl _isatty(int _FileHandle);
#define isatty _isatty
#endif

std::string stringcontents;
int lexerget_lineno(void);
#ifdef __GNUC__
static void yyunput(int, char*) __attribute__((unused));
#endif
extern const char *parser_input_buffer;
extern fs::path parser_sourcefile;
extern FileModule *rootmodule;

#define YY_INPUT(buf,result,max_size) {   \
  if (lexerin && lexerin != stdin) {            \
    int c = fgetc(lexerin);                  \
    if (c >= 0) {                         \
      result = 1;                         \
      buf[0] = c;                         \
    } else {                              \
      result = YY_NULL;                   \
    }                                     \
  } else {                                \
    if (*parser_input_buffer) {           \
      result = 1;                         \
      buf[0] = *(parser_input_buffer++);  \
      parser_error_pos++;                 \
    } else {                              \
      result = YY_NULL;                   \
    }                                     \
  }                                       \
}

void to_utf8(const char *, char *);
void includefile();
fs::path sourcefile();
std::vector<fs::path> filename_stack;
std::vector<int> lineno_stack;
std::vector<FILE*> openfiles;
std::vector<std::string> openfilenames;

std::string filename;
std::string filepath;


extern YYLTYPE parserlloc;
#define yylloc parserlloc

int yycolumn = 1;
#define YY_USER_ACTION yylloc.first_line = yylloc.last_line = lexerlineno; \
    yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+lexerleng-1; \
    yycolumn += lexerleng;




#line 748 "lex.lexer.c"

#define INITIAL 0
#define cond_comment 1
#define cond_lcomment 2
#define cond_string 3
#define cond_include 4
#define cond_use 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int lexerlex_destroy (void );

int lexerget_debug (void );

void lexerset_debug (int debug_flag  );

YY_EXTRA_TYPE lexerget_extra (void );

void lexerset_extra (YY_EXTRA_TYPE user_defined  );

FILE *lexerget_in (void );

void lexerset_in  (FILE * in_str  );

FILE *lexerget_out (void );

void lexerset_out  (FILE * out_str  );

int lexerget_leng (void );

char *lexerget_text (void );

int lexerget_lineno (void );

void lexerset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int lexerwrap (void );
#else
extern int lexerwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( lexertext, lexerleng, 1, lexerout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( lexerin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( lexerin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, lexerin))==0 && ferror(lexerin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(lexerin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int lexerlex (void);

#define YY_DECL int lexerlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after lexertext and lexerleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 119 "src/lexer.l"


#line 943 "lex.lexer.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! lexerin )
			lexerin = stdin;

		if ( ! lexerout )
			lexerout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			lexerensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				lexer_create_buffer(lexerin,YY_BUF_SIZE );
		}

		lexer_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of lexertext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 182 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 343 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < lexerleng; ++yyl )
				if ( lexertext[yyl] == '\n' )
					   
    lexerlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 121 "src/lexer.l"
{ BEGIN(cond_include); filepath = filename = ""; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 123 "src/lexer.l"
{ filepath = lexertext; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 124 "src/lexer.l"
{ filename = lexertext; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 125 "src/lexer.l"
{ BEGIN(INITIAL); includefile(); }
	YY_BREAK

case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 129 "src/lexer.l"
{ BEGIN(cond_use); }
	YY_BREAK

case 6:
YY_RULE_SETUP
#line 131 "src/lexer.l"
{ filename = lexertext; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 132 "src/lexer.l"
{
	BEGIN(INITIAL);
        fs::path fullpath = find_valid_path(sourcefile().parent_path(), fs::path(filename), &openfilenames);
	if (fullpath.empty()) {
          PRINTB("WARNING: Can't open library '%s'.", filename);
          parserlval.text = strdup(filename.c_str());
	} else {
          handle_dep(fullpath.string());
          parserlval.text = strdup(fullpath.string().c_str());
	}
        return TOK_USE;
    }
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(cond_comment):
case YY_STATE_EOF(cond_lcomment):
case YY_STATE_EOF(cond_string):
case YY_STATE_EOF(cond_include):
case YY_STATE_EOF(cond_use):
#line 146 "src/lexer.l"
{
	if (!filename_stack.empty()) filename_stack.pop_back();
	if (!lineno_stack.empty()) {
		lexerlineno = lineno_stack.back();
		lineno_stack.pop_back();
	}
	if (lexerin && lexerin != stdin) {
		assert(!openfiles.empty());
		fclose(openfiles.back());
		openfiles.pop_back();
		openfilenames.pop_back();
	}
	lexerpop_buffer_state();
	if (!YY_CURRENT_BUFFER)
		yyterminate();
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 163 "src/lexer.l"
return TOK_MODULE;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 164 "src/lexer.l"
return TOK_FUNCTION;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 165 "src/lexer.l"
return TOK_IF;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 166 "src/lexer.l"
return TOK_ELSE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 167 "src/lexer.l"
return TOK_LET;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 168 "src/lexer.l"
return TOK_FOR;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 169 "src/lexer.l"
return TOK_EACH;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 171 "src/lexer.l"
return TOK_TRUE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 172 "src/lexer.l"
return TOK_FALSE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 173 "src/lexer.l"
return TOK_UNDEF;
	YY_BREAK
/*
 U+00A0 (UTF-8 encoded: C2A0) is no-break space. We support it since Qt's QTextEdit
 automatically converts these to spaces and we want to be able to process the same
 files on the cmd-line as in the editor.
*/
case 18:
YY_RULE_SETUP
#line 181 "src/lexer.l"

	YY_BREAK
case 19:
YY_RULE_SETUP
#line 183 "src/lexer.l"
{ parser_error_pos -= strlen(lexertext); return TOK_ERROR; }
	YY_BREAK
case 20:
#line 186 "src/lexer.l"
case 21:
#line 187 "src/lexer.l"
case 22:
YY_RULE_SETUP
#line 187 "src/lexer.l"
{
                            try {
                                parserlval.number = boost::lexical_cast<double>(lexertext);
                                return TOK_NUMBER;
                            } catch (boost::bad_lexical_cast) {}
                        }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 193 "src/lexer.l"
{ parserlval.text = strdup(lexertext); return TOK_ID; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 195 "src/lexer.l"
{ BEGIN(cond_string); stringcontents.clear(); }
	YY_BREAK

case 25:
YY_RULE_SETUP
#line 197 "src/lexer.l"
{ stringcontents += '\n'; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 198 "src/lexer.l"
{ stringcontents += '\t'; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 199 "src/lexer.l"
{ stringcontents += '\r'; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 200 "src/lexer.l"
{ stringcontents += '\\'; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 201 "src/lexer.l"
{ stringcontents += '"'; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 202 "src/lexer.l"
{ parser_error_pos -= strlen(lexertext) - 1; stringcontents += lexertext; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 203 "src/lexer.l"
{ unsigned long i = strtoul(lexertext + 2, NULL, 16); stringcontents += (i == 0 ? ' ' : (unsigned char)(i & 0xff)); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 204 "src/lexer.l"
{ char buf[8]; to_utf8(lexertext + 2, buf); stringcontents += buf; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 205 "src/lexer.l"
{ stringcontents += lexertext; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 206 "src/lexer.l"
{ BEGIN(INITIAL);
			parserlval.text = strdup(stringcontents.c_str());
			return TOK_STRING; }
	YY_BREAK

case 35:
YY_RULE_SETUP
#line 211 "src/lexer.l"

	YY_BREAK
case 36:
YY_RULE_SETUP
#line 213 "src/lexer.l"
BEGIN(cond_lcomment);
	YY_BREAK

case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 215 "src/lexer.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 216 "src/lexer.l"
{ parser_error_pos -= strlen(lexertext) - 1; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 217 "src/lexer.l"

	YY_BREAK

case 40:
YY_RULE_SETUP
#line 220 "src/lexer.l"
BEGIN(cond_comment);
	YY_BREAK

case 41:
YY_RULE_SETUP
#line 222 "src/lexer.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 223 "src/lexer.l"
{ parser_error_pos -= strlen(lexertext) - 1; }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 224 "src/lexer.l"

	YY_BREAK

case 44:
YY_RULE_SETUP
#line 227 "src/lexer.l"
return LE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 228 "src/lexer.l"
return GE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 229 "src/lexer.l"
return EQ;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 230 "src/lexer.l"
return NE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 231 "src/lexer.l"
return AND;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 232 "src/lexer.l"
return OR;
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 233 "src/lexer.l"
{ yycolumn = 1;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 234 "src/lexer.l"
{ return lexertext[0]; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 236 "src/lexer.l"
ECHO;
	YY_BREAK
#line 1352 "lex.lexer.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed lexerin at a new source and called
			 * lexerlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = lexerin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( lexerwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * lexertext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of lexerlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					lexerrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			lexerrestart(lexerin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) lexerrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 182 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 182 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 181);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up lexertext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --lexerlineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					lexerrestart(lexerin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( lexerwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve lexertext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    lexerlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void lexerrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        lexerensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            lexer_create_buffer(lexerin,YY_BUF_SIZE );
	}

	lexer_init_buffer(YY_CURRENT_BUFFER,input_file );
	lexer_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void lexer_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		lexerpop_buffer_state();
	 *		lexerpush_buffer_state(new_buffer);
     */
	lexerensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	lexer_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (lexerwrap()) processing, but the only time this flag
	 * is looked at is after lexerwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void lexer_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	lexerin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE lexer_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) lexeralloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in lexer_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) lexeralloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in lexer_create_buffer()" );

	b->yy_is_our_buffer = 1;

	lexer_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with lexer_create_buffer()
 * 
 */
    void lexer_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		lexerfree((void *) b->yy_ch_buf  );

	lexerfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a lexerrestart() or at EOF.
 */
    static void lexer_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	lexer_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then lexer_init_buffer was _probably_
     * called from lexerrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void lexer_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		lexer_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void lexerpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	lexerensure_buffer_stack();

	/* This block is copied from lexer_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from lexer_switch_to_buffer. */
	lexer_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void lexerpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	lexer_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		lexer_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void lexerensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)lexeralloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in lexerensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)lexerrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in lexerensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE lexer_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) lexeralloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in lexer_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	lexer_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to lexerlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       lexer_scan_bytes() instead.
 */
YY_BUFFER_STATE lexer_scan_string (yyconst char * yystr )
{
    
	return lexer_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to lexerlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE lexer_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) lexeralloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in lexer_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = lexer_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in lexer_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up lexertext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		lexertext[lexerleng] = (yy_hold_char); \
		(yy_c_buf_p) = lexertext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		lexerleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int lexerget_lineno  (void)
{
        
    return lexerlineno;
}

/** Get the input stream.
 * 
 */
FILE *lexerget_in  (void)
{
        return lexerin;
}

/** Get the output stream.
 * 
 */
FILE *lexerget_out  (void)
{
        return lexerout;
}

/** Get the length of the current token.
 * 
 */
int lexerget_leng  (void)
{
        return lexerleng;
}

/** Get the current token.
 * 
 */

char *lexerget_text  (void)
{
        return lexertext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void lexerset_lineno (int  line_number )
{
    
    lexerlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see lexer_switch_to_buffer
 */
void lexerset_in (FILE *  in_str )
{
        lexerin = in_str ;
}

void lexerset_out (FILE *  out_str )
{
        lexerout = out_str ;
}

int lexerget_debug  (void)
{
        return lexer_flex_debug;
}

void lexerset_debug (int  bdebug )
{
        lexer_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from lexerlex_destroy(), so don't allocate here.
     */

    /* We do not touch lexerlineno unless the option is enabled. */
    lexerlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    lexerin = stdin;
    lexerout = stdout;
#else
    lexerin = (FILE *) 0;
    lexerout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * lexerlex_init()
     */
    return 0;
}

/* lexerlex_destroy is for both reentrant and non-reentrant scanners. */
int lexerlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		lexer_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		lexerpop_buffer_state();
	}

	/* Destroy the stack itself. */
	lexerfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * lexerlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *lexeralloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *lexerrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void lexerfree (void * ptr )
{
	free( (char *) ptr );	/* see lexerrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 236 "src/lexer.l"



/*!
 * Convert unicode codepoint given in hex notation
 * into UTF8 encoding. The output buffer must be 8
 * characters long.
 */
void to_utf8(const char *str, char *out)
{
    memset(out, 0, 8);
    const gunichar c = strtoul(str, NULL, 16);
    if (g_unichar_validate(c) && (c != 0)) {
        g_unichar_to_utf8(c, out);
    } else {
        out[0] = ' ';
    }
}

// Filename of the source file currently being lexed.
fs::path sourcefile()
{
  if (!filename_stack.empty()) return filename_stack.back();

  return parser_sourcefile;
}

/*
  Rules for include <path/file>
  1) include <sourcepath/path/file>
  2) include <librarydir/path/file>

  Globals used: filepath, sourcefile, filename
 */
void includefile()
{
  fs::path localpath = fs::path(filepath) / filename;
  fs::path fullpath = find_valid_path(sourcefile().parent_path(), localpath, &openfilenames);
  if (!fullpath.empty()) {
    rootmodule->registerInclude(boosty::stringy(localpath), boosty::stringy(fullpath));
  }
  else {
    rootmodule->registerInclude(boosty::stringy(localpath), boosty::stringy(localpath));
    PRINTB("WARNING: Can't open include file '%s'.", boosty::stringy(localpath));
    return;
  };

  std::string fullname = boosty::stringy(fullpath);

  filepath.clear();
  filename_stack.push_back(fullpath);

  handle_dep(fullname);

  lexerin = fopen(fullname.c_str(), "r");
  if (!lexerin) {
    PRINTB("WARNING: Can't open include file '%s'.", boosty::stringy(localpath));
    filename_stack.pop_back();
    return;
  }

  lineno_stack.push_back(lexerlineno);
  lexerlineno = 1;
  openfiles.push_back(lexerin);
  openfilenames.push_back(fullname);
  filename.clear();

  lexerpush_buffer_state(lexer_create_buffer(lexerin,YY_BUF_SIZE));
}

/*!
  In case of an error, this will make sure we clean up our custom data structures
  and close all files.
*/
void lexerdestroy()
{
	for (auto f : openfiles) fclose(f);
	openfiles.clear();
	openfilenames.clear();
	filename_stack.clear();
	lineno_stack.clear();
}

